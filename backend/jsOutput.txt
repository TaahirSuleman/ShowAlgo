AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "(2)",
          "operator": "+",
          "right": "(3)"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = \"(2)\" + \"(3)\" * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "(2)",
          "operator": "+",
          "right": "(3)"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = \"(2)\" + \"(3)\" * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "(2)",
          "operator": "+",
          "right": "(3)"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = \"(2)\" + \"(3)\" * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "(2)",
          "operator": "+",
          "right": "(3)"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = \"(2)\" + \"(3)\" * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * (2 + (3 - 1) / 2 + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * (2 + (3 - 1) / 2 + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (5 * 2 + (3 - 1 / 2) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + (3 * 4));"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * (2 + (3 - 1) / 2 + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * (2 + (3 - 1) / 2 + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * (2 + (3 - 1) / 2 + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * 2 + 3 - 1 / 2 + 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * (2 + (3 - 1) / 2 + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + 3 * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "5",
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "Expression",
          "left": {
            "type": "Expression",
            "left": {
              "type": "NumberLiteral",
              "value": "2",
              "line": 2
            },
            "operator": "+",
            "right": {
              "type": "Expression",
              "left": {
                "type": "Expression",
                "left": {
                  "type": "NumberLiteral",
                  "value": "3",
                  "line": 2
                },
                "operator": "-",
                "right": {
                  "type": "NumberLiteral",
                  "value": "1",
                  "line": 2
                },
                "line": 2
              },
              "operator": "/",
              "right": {
                "type": "NumberLiteral",
                "value": "2",
                "line": 2
              },
              "line": 2
            },
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "5",
        "operator": "*",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": {
            "type": "Expression",
            "line": 2,
            "left": "2",
            "operator": "+",
            "right": {
              "type": "Expression",
              "line": 2,
              "left": {
                "type": "Expression",
                "line": 2,
                "left": "3",
                "operator": "-",
                "right": "1"
              },
              "operator": "/",
              "right": "2"
            }
          },
          "operator": "+",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 5 * ((2 + ((3 - 1) / 2)) + 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "2",
            "line": 2
          },
          "operator": "+",
          "right": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "line": 2
        },
        "operator": "*",
        "right": {
          "type": "NumberLiteral",
          "value": "4",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": {
          "type": "Expression",
          "line": 2,
          "left": "2",
          "operator": "+",
          "right": "3"
        },
        "operator": "*",
        "right": "4"
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = (2 + 3) * 4;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "result",
      "varType": null,
      "value": {
        "type": "Expression",
        "left": {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        "operator": "+",
        "right": {
          "type": "Expression",
          "left": {
            "type": "NumberLiteral",
            "value": "3",
            "line": 2
          },
          "operator": "*",
          "right": {
            "type": "NumberLiteral",
            "value": "4",
            "line": 2
          },
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "result",
      "value": {
        "type": "Expression",
        "line": 2,
        "left": "2",
        "operator": "+",
        "right": {
          "type": "Expression",
          "line": 2,
          "left": "3",
          "operator": "*",
          "right": "4"
        }
      }
    }
  ]
}
Final Output: "'use strict';\nlet result = 2 + (3 * 4);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "partOfName",
      "varType": null,
      "value": {
        "type": "SubstringExpression",
        "string": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "start": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "end": {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "partOfName",
      "value": {
        "type": "SubstringExpression",
        "string": "fullName",
        "line": 2,
        "start": "0",
        "end": "3"
      }
    }
  ]
}
Final Output: "'use strict';\nlet partOfName = fullName.substring(0, 3);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstCharacter",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstCharacter",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "fullName",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstCharacter = fullName[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "nameLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "fullName",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "nameLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "fullName"
      }
    }
  ]
}
Final Output: "'use strict';\nlet nameLength = fullName.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "arrType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "unInitialised": false,
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayCreation",
      "varName": "myArray",
      "dsType": "number",
      "values": [
        {
          "type": "NumberLiteral",
          "value": "1",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "2",
          "line": 2
        },
        {
          "type": "NumberLiteral",
          "value": "3",
          "line": 2
        }
      ],
      "line": 2,
      "unInitialised": false
    }
  ]
}
Final Output: "'use strict';\nlet myArray = [1, 2, 3];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArrayInsertion",
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArrayInsertion",
      "line": 2,
      "varName": "myArray",
      "value": {
        "type": "NumberLiteral",
        "value": "5",
        "line": 2
      },
      "position": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 0, 5);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "RemoveOperation",
      "varName": "myArray",
      "positionToRemove": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "RemoveOperation",
      "line": 2,
      "varName": "myArray",
      "positionToRemove": "2"
    }
  ]
}
Final Output: "'use strict';\nmyArray.splice(2, 1);"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "ArraySetValue",
      "varName": "myArray",
      "position": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "newValue": {
        "type": "NumberLiteral",
        "value": "10",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "ArraySetValue",
      "line": 2,
      "varName": "myArray",
      "index": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "setValue": "10"
    }
  ]
}
Final Output: "'use strict';\nmyArray[1] = 10;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "firstElement",
      "varType": null,
      "value": {
        "type": "IndexExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "index": {
          "type": "NumberLiteral",
          "value": "0",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "firstElement",
      "value": {
        "type": "IndexExpression",
        "line": 2,
        "source": "myArray",
        "index": "0"
      }
    }
  ]
}
Final Output: "'use strict';\nlet firstElement = myArray[0];"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "varName": "totalLength",
      "varType": null,
      "value": {
        "type": "LengthExpression",
        "source": {
          "type": "Identifier",
          "value": "myArray",
          "line": 2
        },
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "VariableDeclaration",
      "line": 2,
      "name": "totalLength",
      "value": {
        "type": "LengthExpression",
        "line": 2,
        "source": "myArray"
      }
    }
  ]
}
Final Output: "'use strict';\nlet totalLength = myArray.length;"
AST: {
  "type": "Program",
  "body": [
    {
      "type": "SwapOperation",
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      },
      "line": 2
    }
  ]
}
Intermediate Representation: {
  "program": [
    {
      "type": "SwapOperation",
      "line": 2,
      "varName": "myArray",
      "firstPosition": {
        "type": "NumberLiteral",
        "value": "1",
        "line": 2
      },
      "secondPosition": {
        "type": "NumberLiteral",
        "value": "2",
        "line": 2
      }
    }
  ]
}
Final Output: "'use strict';\nlet temp = myArray[1];\nmyArray[1] = myArray[2];\nmyArray[2] = temp;"
